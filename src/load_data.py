"""
Script: load_data.py (ƒë·∫∑t trong th∆∞ m·ª•c src/)
T·ª± ƒë·ªông t·∫°o c·∫•u tr√∫c Ontology v√† n·∫°p d·ªØ li·ªáu CSV v√†o Neo4j.
S·ª≠ d·ª•ng file k·∫øt n·ªëi 'neo4j_connector.py'
"""

import pandas as pd
import json
from pathlib import Path
from neo4j import Driver
import sys

# --- 1. IMPORT T·ª™ FILE SIBLING (ngang h√†ng) ---
# V√¨ file n√†y n·∫±m trong 'src/', n√≥ c√≥ th·ªÉ import tr·ª±c ti·∫øp
try:
    from neo4j_connector import get_neo4j_driver, close_neo4j_driver
except ImportError:
    print("L·ªói: Kh√¥ng th·ªÉ import 'neo4j_connector'.")
    print("ƒê·∫£m b·∫£o file n√†y v√† 'neo4j_connector.py' c√πng n·∫±m trong th∆∞ m·ª•c 'src/'.")
    sys.exit()

# --- 2. C·∫•u h√¨nh PATH ---
# X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc (EcodeSafety/)
try:
    SCRIPT_DIR = Path(__file__).resolve().parent # -> .../EcodeSafety/src
    ROOT_DIR = SCRIPT_DIR.parent               # -> .../EcodeSafety/
except NameError:
    # Fallback n·∫øu ch·∫°y trong m√¥i tr∆∞·ªùng t∆∞∆°ng t√°c (notebook)
    ROOT_DIR = Path.cwd().parent 
    print(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ d√πng __file__, gi·∫£ ƒë·ªãnh ROOT_DIR l√† {ROOT_DIR}")


SCHEMA_PATH = ROOT_DIR / "ontology" / "schema.json"
CSV_PATH = ROOT_DIR / "data" / "ecodes_master.csv"

# --- T·∫£i schema ---
try:
    schema_text = SCHEMA_PATH.read_text(encoding="utf-8")
    schema = json.loads(schema_text)
    print(f"‚úÖ T·∫£i schema t·ª´ {SCHEMA_PATH} th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc file schema t·∫°i {SCHEMA_PATH}. L·ªói: {e}")
    sys.exit()

# --- H√†m th·ª±c thi Cypher (nh·∫≠n driver l√†m tham s·ªë) ---
def run_query(driver: Driver, query, params=None):
    with driver.session() as session:
        session.run(query, params or {})

# --- 3. T·∫°o Constraints (nh·∫≠n driver l√†m tham s·ªë) ---
def create_constraints(driver: Driver):
    print("üîÑ B·∫Øt ƒë·∫ßu t·∫°o constraints...")
    for c in schema["constraints"]:
        q = f"""
        CREATE CONSTRAINT {c['label'].lower()}_{c['key']}_uniq IF NOT EXISTS
        FOR (n:{c['label']}) REQUIRE n.{c['key']} IS UNIQUE
        """
        run_query(driver, q)
    print("‚úÖ Constraints ƒë√£ ƒë∆∞·ª£c t·∫°o (ho·∫∑c ƒë√£ t·ªìn t·∫°i).")

# --- 4. N·∫°p d·ªØ li·ªáu (nh·∫≠n driver l√†m tham s·ªë) ---
def import_data(driver: Driver):
    try:
        df = pd.read_csv(CSV_PATH, encoding="utf-8-sig").fillna("")
        print(f"üì¶ ƒê√£ ƒë·ªçc {len(df)} d√≤ng t·ª´ {CSV_PATH}.")
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file CSV t·∫°i {CSV_PATH}.")
        return
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return

    print("üîÑ B·∫Øt ƒë·∫ßu n·∫°p d·ªØ li·ªáu v√†o Neo4j (vi·ªác n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t)...")
    
    for _, row in df.iterrows():
        try:
            ecode = row["ECode"].strip()
            if not ecode:
                continue

            # ƒê·ªçc t·∫•t c·∫£ c√°c c·ªôt
            common = row["CommonName"].strip()
            cat = row["Category"].strip()
            adi = row["ADI_mgkg"].strip()
            risk = row["RiskLevel"].strip().capitalize()
            contra = row["Contraindications"].strip()
            source = row["Source"].strip()
            effects = [e.strip() for e in str(row["Effects"]).split(",") if e.strip()]
            countries = [c.strip().upper() for c in str(row["BannedIn"]).split(",") if c.strip()]

            # Query t·ªëi ∆∞u (ch·ªâ t·∫°o node/quan h·ªá n·∫øu c√≥ d·ªØ li·ªáu)
            query = """
            MERGE (a:Additive {ECode: $ecode})
            SET a.CommonName = $common, a.ADI_mgkg = $adi, a.Contraindications = $contra
            WITH a WHERE $cat <> ""
            MERGE (cat:Category {name: $cat})
            MERGE (a)-[:HAS_CATEGORY]->(cat)
            WITH a WHERE $risk <> ""
            MERGE (r:RiskLevel {level: $risk})
            MERGE (a)-[:HAS_RISK]->(r)
            WITH a WHERE $source <> ""
            MERGE (s:Source {name: $source})
            MERGE (a)-[:HAS_SOURCE]->(s)
            WITH a
            UNWIND $effects AS eff
                MERGE (e:Effect {name: eff})
                MERGE (a)-[:HAS_EFFECT]->(e)
            WITH a
            UNWIND $countries AS co
                MERGE (c:Country {code: co})
                MERGE (a)-[:BBANNED_IN]->(c)
            """
            
            run_query(driver, query, {
                "ecode": ecode, "common": common, "cat": cat,
                "adi": adi, "risk": risk, "contra": contra,
                "source": source, "effects": effects, "countries": countries
            })
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω d√≤ng {ecode}: {e}")

    print("‚úÖ N·∫°p d·ªØ li·ªáu ho√†n t·∫•t.")


if __name__ == "__main__":
    main_driver = None
    try:
        # 1. L·∫§Y K·∫æT N·ªêI (t·ª´ file neo4j_connector)
        main_driver = get_neo4j_driver()
        print("========================================")
        
        # 2. Ch·∫°y logic
        create_constraints(main_driver)
        import_data(main_driver)
        
        print("========================================")
        print("üéØ Ontology v√† d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c n·∫°p th√†nh c√¥ng.")

    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng x·∫£y ra: {e}")
    finally:
        # 3. LU√îN LU√îN ƒê√ìNG K·∫æT N·ªêI
        close_neo4j_driver()